
Smart_Home_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800060  00800060  0000058c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001276  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000977  00000000  00000000  000019fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a3a  00000000  00000000  00002375  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00002db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067f  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007d1  00000000  00000000  00003773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 37       	cpi	r26, 0x70	; 112
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 8e 01 	call	0x31c	; 0x31c <main>
  74:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DC_Motor_Init>:

#include "DC_Motor.h"

void DC_Motor_Init(void)
{
	DIO_SetPin_Dir(DIO_PORTC,DIO_PIN3,DIO_PIN_OUTPUT);
  7c:	41 e0       	ldi	r20, 0x01	; 1
  7e:	63 e0       	ldi	r22, 0x03	; 3
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
	
	DIO_SetPin_Dir(DIO_PORTC,DIO_PIN4,DIO_PIN_OUTPUT);
  86:	41 e0       	ldi	r20, 0x01	; 1
  88:	64 e0       	ldi	r22, 0x04	; 4
  8a:	82 e0       	ldi	r24, 0x02	; 2
  8c:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
		
	PWM0_Init();
  90:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <PWM0_Init>
  94:	08 95       	ret

00000096 <DC_Motor_Set_Dir>:
}

void DC_Motor_Set_Dir(DC_Motor_Dir dir)
{
	switch (dir)
  96:	88 23       	and	r24, r24
  98:	19 f0       	breq	.+6      	; 0xa0 <DC_Motor_Set_Dir+0xa>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	61 f0       	breq	.+24     	; 0xb6 <DC_Motor_Set_Dir+0x20>
  9e:	08 95       	ret
	{
		case CLOCK_WISE_DIR:
		DIO_SetPin_Value(DIO_PORTC,DIO_PIN3,DIO_PIN_HIGH);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_SetPin_Value>
		
		DIO_SetPin_Value(DIO_PORTC,DIO_PIN4	,DIO_PIN_LOW);
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	64 e0       	ldi	r22, 0x04	; 4
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_SetPin_Value>
		
		break;
  b4:	08 95       	ret
		
		case ANTI_CLOCK_WISE_DIR:
		
		DIO_SetPin_Value(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_SetPin_Value>
		
		DIO_SetPin_Value(DIO_PORTC,DIO_PIN4	,DIO_PIN_HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	64 e0       	ldi	r22, 0x04	; 4
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_SetPin_Value>
  ca:	08 95       	ret

000000cc <DC_Motor_Set_Speed>:
	}
}

void DC_Motor_Set_Speed(uint8 speed)
{
	PWM0_Adjust(speed);
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	0e 94 67 02 	call	0x4ce	; 0x4ce <PWM0_Adjust>
  d2:	08 95       	ret

000000d4 <DC_Motor_Start>:
}

void DC_Motor_Start(void)
{
	PWM0_Start();
  d4:	0e 94 77 02 	call	0x4ee	; 0x4ee <PWM0_Start>
  d8:	08 95       	ret

000000da <DC_Motor_Stop>:
	
}

void DC_Motor_Stop(void)
{
			DIO_SetPin_Value(DIO_PORTC,DIO_PIN3,DIO_PIN_LOW);
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	63 e0       	ldi	r22, 0x03	; 3
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_SetPin_Value>
			
			DIO_SetPin_Value(DIO_PORTC,DIO_PIN4	,DIO_PIN_LOW);
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	64 e0       	ldi	r22, 0x04	; 4
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <DIO_SetPin_Value>
  ee:	08 95       	ret

000000f0 <DIO_SetPin_Dir>:
		case DIO_PORTC :
		PORTC ^= 0xff;
		break;
		
		case DIO_PORTD :
		PORTD ^= 0xff;
  f0:	44 23       	and	r20, r20
  f2:	b9 f1       	breq	.+110    	; 0x162 <DIO_SetPin_Dir+0x72>
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	09 f0       	breq	.+2      	; 0xfa <DIO_SetPin_Dir+0xa>
  f8:	6b c0       	rjmp	.+214    	; 0x1d0 <DIO_SetPin_Dir+0xe0>
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	89 f0       	breq	.+34     	; 0x120 <DIO_SetPin_Dir+0x30>
  fe:	28 f0       	brcs	.+10     	; 0x10a <DIO_SetPin_Dir+0x1a>
 100:	82 30       	cpi	r24, 0x02	; 2
 102:	c9 f0       	breq	.+50     	; 0x136 <DIO_SetPin_Dir+0x46>
 104:	83 30       	cpi	r24, 0x03	; 3
 106:	11 f1       	breq	.+68     	; 0x14c <DIO_SetPin_Dir+0x5c>
 108:	08 95       	ret
 10a:	2a b3       	in	r18, 0x1a	; 26
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_SetPin_Dir+0x26>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_SetPin_Dir+0x22>
 11a:	82 2b       	or	r24, r18
 11c:	8a bb       	out	0x1a, r24	; 26
 11e:	08 95       	ret
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPin_Dir+0x3c>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPin_Dir+0x38>
 130:	82 2b       	or	r24, r18
 132:	87 bb       	out	0x17, r24	; 23
 134:	08 95       	ret
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_SetPin_Dir+0x52>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_SetPin_Dir+0x4e>
 146:	82 2b       	or	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPin_Dir+0x68>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPin_Dir+0x64>
 15c:	82 2b       	or	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret
 162:	81 30       	cpi	r24, 0x01	; 1
 164:	91 f0       	breq	.+36     	; 0x18a <DIO_SetPin_Dir+0x9a>
 166:	28 f0       	brcs	.+10     	; 0x172 <DIO_SetPin_Dir+0x82>
 168:	82 30       	cpi	r24, 0x02	; 2
 16a:	d9 f0       	breq	.+54     	; 0x1a2 <DIO_SetPin_Dir+0xb2>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	29 f1       	breq	.+74     	; 0x1ba <DIO_SetPin_Dir+0xca>
 170:	08 95       	ret
 172:	2a b3       	in	r18, 0x1a	; 26
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_SetPin_Dir+0x8e>
 17a:	88 0f       	add	r24, r24
 17c:	99 1f       	adc	r25, r25
 17e:	6a 95       	dec	r22
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_SetPin_Dir+0x8a>
 182:	80 95       	com	r24
 184:	82 23       	and	r24, r18
 186:	8a bb       	out	0x1a, r24	; 26
 188:	08 95       	ret
 18a:	27 b3       	in	r18, 0x17	; 23
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_SetPin_Dir+0xa6>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_SetPin_Dir+0xa2>
 19a:	80 95       	com	r24
 19c:	82 23       	and	r24, r18
 19e:	87 bb       	out	0x17, r24	; 23
 1a0:	08 95       	ret
 1a2:	24 b3       	in	r18, 0x14	; 20
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_SetPin_Dir+0xbe>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_SetPin_Dir+0xba>
 1b2:	80 95       	com	r24
 1b4:	82 23       	and	r24, r18
 1b6:	84 bb       	out	0x14, r24	; 20
 1b8:	08 95       	ret
 1ba:	21 b3       	in	r18, 0x11	; 17
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_SetPin_Dir+0xd6>
 1c2:	88 0f       	add	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	6a 95       	dec	r22
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_SetPin_Dir+0xd2>
 1ca:	80 95       	com	r24
 1cc:	82 23       	and	r24, r18
 1ce:	81 bb       	out	0x11, r24	; 17
 1d0:	08 95       	ret

000001d2 <DIO_SetPin_Value>:
 1d2:	44 23       	and	r20, r20
 1d4:	b9 f1       	breq	.+110    	; 0x244 <DIO_SetPin_Value+0x72>
 1d6:	41 30       	cpi	r20, 0x01	; 1
 1d8:	09 f0       	breq	.+2      	; 0x1dc <DIO_SetPin_Value+0xa>
 1da:	6b c0       	rjmp	.+214    	; 0x2b2 <DIO_SetPin_Value+0xe0>
 1dc:	81 30       	cpi	r24, 0x01	; 1
 1de:	89 f0       	breq	.+34     	; 0x202 <DIO_SetPin_Value+0x30>
 1e0:	28 f0       	brcs	.+10     	; 0x1ec <DIO_SetPin_Value+0x1a>
 1e2:	82 30       	cpi	r24, 0x02	; 2
 1e4:	c9 f0       	breq	.+50     	; 0x218 <DIO_SetPin_Value+0x46>
 1e6:	83 30       	cpi	r24, 0x03	; 3
 1e8:	11 f1       	breq	.+68     	; 0x22e <DIO_SetPin_Value+0x5c>
 1ea:	08 95       	ret
 1ec:	2b b3       	in	r18, 0x1b	; 27
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_SetPin_Value+0x26>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_SetPin_Value+0x22>
 1fc:	82 2b       	or	r24, r18
 1fe:	8b bb       	out	0x1b, r24	; 27
 200:	08 95       	ret
 202:	28 b3       	in	r18, 0x18	; 24
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_SetPin_Value+0x3c>
 20a:	88 0f       	add	r24, r24
 20c:	99 1f       	adc	r25, r25
 20e:	6a 95       	dec	r22
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_SetPin_Value+0x38>
 212:	82 2b       	or	r24, r18
 214:	88 bb       	out	0x18, r24	; 24
 216:	08 95       	ret
 218:	25 b3       	in	r18, 0x15	; 21
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPin_Value+0x52>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPin_Value+0x4e>
 228:	82 2b       	or	r24, r18
 22a:	85 bb       	out	0x15, r24	; 21
 22c:	08 95       	ret
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPin_Value+0x68>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPin_Value+0x64>
 23e:	82 2b       	or	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	91 f0       	breq	.+36     	; 0x26c <DIO_SetPin_Value+0x9a>
 248:	28 f0       	brcs	.+10     	; 0x254 <DIO_SetPin_Value+0x82>
 24a:	82 30       	cpi	r24, 0x02	; 2
 24c:	d9 f0       	breq	.+54     	; 0x284 <DIO_SetPin_Value+0xb2>
 24e:	83 30       	cpi	r24, 0x03	; 3
 250:	29 f1       	breq	.+74     	; 0x29c <DIO_SetPin_Value+0xca>
 252:	08 95       	ret
 254:	2b b3       	in	r18, 0x1b	; 27
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_SetPin_Value+0x8e>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	6a 95       	dec	r22
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_SetPin_Value+0x8a>
 264:	80 95       	com	r24
 266:	82 23       	and	r24, r18
 268:	8b bb       	out	0x1b, r24	; 27
 26a:	08 95       	ret
 26c:	28 b3       	in	r18, 0x18	; 24
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_SetPin_Value+0xa6>
 274:	88 0f       	add	r24, r24
 276:	99 1f       	adc	r25, r25
 278:	6a 95       	dec	r22
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_SetPin_Value+0xa2>
 27c:	80 95       	com	r24
 27e:	82 23       	and	r24, r18
 280:	88 bb       	out	0x18, r24	; 24
 282:	08 95       	ret
 284:	25 b3       	in	r18, 0x15	; 21
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPin_Value+0xbe>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPin_Value+0xba>
 294:	80 95       	com	r24
 296:	82 23       	and	r24, r18
 298:	85 bb       	out	0x15, r24	; 21
 29a:	08 95       	ret
 29c:	22 b3       	in	r18, 0x12	; 18
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPin_Value+0xd6>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPin_Value+0xd2>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	82 bb       	out	0x12, r24	; 18
 2b2:	08 95       	ret

000002b4 <DIO_TogglePin>:
	}
}

void DIO_TogglePin(uint8 Port, uint8 Pin)
{
	switch (Port)
 2b4:	81 30       	cpi	r24, 0x01	; 1
 2b6:	89 f0       	breq	.+34     	; 0x2da <DIO_TogglePin+0x26>
 2b8:	28 f0       	brcs	.+10     	; 0x2c4 <DIO_TogglePin+0x10>
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	c9 f0       	breq	.+50     	; 0x2f0 <DIO_TogglePin+0x3c>
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	11 f1       	breq	.+68     	; 0x306 <DIO_TogglePin+0x52>
 2c2:	08 95       	ret
	{
		case DIO_PORTA :
		Toggle_BIT(PORTA , Pin);
 2c4:	2b b3       	in	r18, 0x1b	; 27
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_TogglePin+0x1c>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_TogglePin+0x18>
 2d4:	82 27       	eor	r24, r18
 2d6:	8b bb       	out	0x1b, r24	; 27
		break;
 2d8:	08 95       	ret
		
		case DIO_PORTB :
		Toggle_BIT(PORTB , Pin);
 2da:	28 b3       	in	r18, 0x18	; 24
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_TogglePin+0x32>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_TogglePin+0x2e>
 2ea:	82 27       	eor	r24, r18
 2ec:	88 bb       	out	0x18, r24	; 24
		break;
 2ee:	08 95       	ret
		
		case DIO_PORTC :
		Toggle_BIT(PORTC , Pin);
 2f0:	25 b3       	in	r18, 0x15	; 21
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_TogglePin+0x48>
 2f8:	88 0f       	add	r24, r24
 2fa:	99 1f       	adc	r25, r25
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_TogglePin+0x44>
 300:	82 27       	eor	r24, r18
 302:	85 bb       	out	0x15, r24	; 21
		break;
 304:	08 95       	ret
		
		case DIO_PORTD :
		Toggle_BIT(PORTD , Pin);
 306:	22 b3       	in	r18, 0x12	; 18
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	02 c0       	rjmp	.+4      	; 0x312 <DIO_TogglePin+0x5e>
 30e:	88 0f       	add	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	6a 95       	dec	r22
 314:	e2 f7       	brpl	.-8      	; 0x30e <DIO_TogglePin+0x5a>
 316:	82 27       	eor	r24, r18
 318:	82 bb       	out	0x12, r24	; 18
 31a:	08 95       	ret

0000031c <main>:

#include "DC_Motor.h"

int main(void)
{
	DC_Motor_Init();
 31c:	0e 94 3e 00 	call	0x7c	; 0x7c <DC_Motor_Init>
	
	uint8 received = 0;
	
	// set pin1 of portc output for led
	
	DIO_SetPin_Dir(DIO_PORTC,DIO_PIN1, DIO_PIN_OUTPUT);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	82 e0       	ldi	r24, 0x02	; 2
 326:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
	
	
	
	
	//init spi of mcu2 as slave 
	SPI_Slave_Init();
 32a:	0e 94 cc 01 	call	0x398	; 0x398 <SPI_Slave_Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	83 ed       	ldi	r24, 0xD3	; 211
 332:	90 e3       	ldi	r25, 0x30	; 48
 334:	21 50       	subi	r18, 0x01	; 1
 336:	80 40       	sbci	r24, 0x00	; 0
 338:	90 40       	sbci	r25, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <main+0x18>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <main+0x22>
 33e:	00 00       	nop
	
	_delay_ms(1000);
	while (1)
	{
		// receive data from mcu1 and transmit value which means that transmission is complete
		received=SPI_Transfer_Recieve(3);
 340:	83 e0       	ldi	r24, 0x03	; 3
 342:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <SPI_Transfer_Recieve>
		//check for the value sent by user 1 to toggle led and 2 to open door 
		if(received=='1')
 346:	81 33       	cpi	r24, 0x31	; 49
 348:	29 f4       	brne	.+10     	; 0x354 <main+0x38>
		{
			DIO_TogglePin(DIO_PORTC,DIO_PIN1);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_TogglePin>
			
			received=0;
 352:	80 e0       	ldi	r24, 0x00	; 0
		}
		 if (received=='2')
 354:	82 33       	cpi	r24, 0x32	; 50
 356:	a1 f7       	brne	.-24     	; 0x340 <main+0x24>
		{
				
			// set speed of motor
			DC_Motor_Set_Speed(100);
 358:	84 e6       	ldi	r24, 0x64	; 100
 35a:	0e 94 66 00 	call	0xcc	; 0xcc <DC_Motor_Set_Speed>
			//open door by motor 
			DC_Motor_Set_Dir(ANTI_CLOCK_WISE_DIR);	
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	0e 94 4b 00 	call	0x96	; 0x96 <DC_Motor_Set_Dir>
			DC_Motor_Start();
 364:	0e 94 6a 00 	call	0xd4	; 0xd4 <DC_Motor_Start>
 368:	2f ef       	ldi	r18, 0xFF	; 255
 36a:	83 ed       	ldi	r24, 0xD3	; 211
 36c:	90 e3       	ldi	r25, 0x30	; 48
 36e:	21 50       	subi	r18, 0x01	; 1
 370:	80 40       	sbci	r24, 0x00	; 0
 372:	90 40       	sbci	r25, 0x00	; 0
 374:	e1 f7       	brne	.-8      	; 0x36e <main+0x52>
 376:	00 c0       	rjmp	.+0      	; 0x378 <main+0x5c>
 378:	00 00       	nop
			//wait period of time then auto close the door 
			_delay_ms(1000);
			DC_Motor_Set_Dir(CLOCK_WISE_DIR);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 4b 00 	call	0x96	; 0x96 <DC_Motor_Set_Dir>
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	83 ed       	ldi	r24, 0xD3	; 211
 384:	90 e3       	ldi	r25, 0x30	; 48
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <main+0x6a>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <main+0x74>
 390:	00 00       	nop
			_delay_ms(1000);
			//stop dc motor after closing door 
			DC_Motor_Stop();	
 392:	0e 94 6d 00 	call	0xda	; 0xda <DC_Motor_Stop>
 396:	d4 cf       	rjmp	.-88     	; 0x340 <main+0x24>

00000398 <SPI_Slave_Init>:
	
}

void SPI_Master_Term_Comm(void)
{
	DIO_SetPin_Value(DIO_PORTB, DIO_PIN4, DIO_PIN_HIGH);
 398:	41 e0       	ldi	r20, 0x01	; 1
 39a:	66 e0       	ldi	r22, 0x06	; 6
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	65 e0       	ldi	r22, 0x05	; 5
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
 3ac:	40 e0       	ldi	r20, 0x00	; 0
 3ae:	67 e0       	ldi	r22, 0x07	; 7
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	64 e0       	ldi	r22, 0x04	; 4
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_SetPin_Dir>
 3c0:	8d b1       	in	r24, 0x0d	; 13
 3c2:	80 64       	ori	r24, 0x40	; 64
 3c4:	8d b9       	out	0x0d, r24	; 13
 3c6:	08 95       	ret

000003c8 <SPI_Transfer_Recieve>:

uint8 SPI_Transfer_Recieve(uint8 data)
{
	uint8 rec_data=0;
	
	SPI->SPDR=data;
 3c8:	8f b9       	out	0x0f, r24	; 15
	
	while (GET_BIT(SPI->SPSR , 7)==0);
 3ca:	77 9b       	sbis	0x0e, 7	; 14
 3cc:	fe cf       	rjmp	.-4      	; 0x3ca <SPI_Transfer_Recieve+0x2>
	
	rec_data = SPI-> SPDR ;
 3ce:	8f b1       	in	r24, 0x0f	; 15
	
	return rec_data;
	
}
 3d0:	08 95       	ret

000003d2 <__vector_11>:
	
}

void Set_Call_Back1(void (*p)(void))
{
	Ptr_1=p;
 3d2:	1f 92       	push	r1
 3d4:	0f 92       	push	r0
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	0f 92       	push	r0
 3da:	11 24       	eor	r1, r1
 3dc:	2f 93       	push	r18
 3de:	3f 93       	push	r19
 3e0:	4f 93       	push	r20
 3e2:	5f 93       	push	r21
 3e4:	6f 93       	push	r22
 3e6:	7f 93       	push	r23
 3e8:	8f 93       	push	r24
 3ea:	9f 93       	push	r25
 3ec:	af 93       	push	r26
 3ee:	bf 93       	push	r27
 3f0:	ef 93       	push	r30
 3f2:	ff 93       	push	r31
 3f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 3f8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3fc:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 400:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	a1 1d       	adc	r26, r1
 408:	b1 1d       	adc	r27, r1
 40a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 40e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 412:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 416:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 41a:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <NUM_OVF>
 41e:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <NUM_OVF+0x1>
 422:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <NUM_OVF+0x2>
 426:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <NUM_OVF+0x3>
 42a:	84 17       	cp	r24, r20
 42c:	95 07       	cpc	r25, r21
 42e:	a6 07       	cpc	r26, r22
 430:	b7 07       	cpc	r27, r23
 432:	41 f4       	brne	.+16     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 434:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <Ptr_0>
 438:	f0 91 6f 00 	lds	r31, 0x006F	; 0x80006f <Ptr_0+0x1>
 43c:	09 95       	icall
 43e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <INIT_VALUE>
 442:	82 bf       	out	0x32, r24	; 50
 444:	ff 91       	pop	r31
 446:	ef 91       	pop	r30
 448:	bf 91       	pop	r27
 44a:	af 91       	pop	r26
 44c:	9f 91       	pop	r25
 44e:	8f 91       	pop	r24
 450:	7f 91       	pop	r23
 452:	6f 91       	pop	r22
 454:	5f 91       	pop	r21
 456:	4f 91       	pop	r20
 458:	3f 91       	pop	r19
 45a:	2f 91       	pop	r18
 45c:	0f 90       	pop	r0
 45e:	0f be       	out	0x3f, r0	; 63
 460:	0f 90       	pop	r0
 462:	1f 90       	pop	r1
 464:	18 95       	reti

00000466 <__vector_7>:
}

ISR(TIMER1_COMPA_vect)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	2f 93       	push	r18
 472:	3f 93       	push	r19
 474:	4f 93       	push	r20
 476:	5f 93       	push	r21
 478:	6f 93       	push	r22
 47a:	7f 93       	push	r23
 47c:	8f 93       	push	r24
 47e:	9f 93       	push	r25
 480:	af 93       	push	r26
 482:	bf 93       	push	r27
 484:	ef 93       	push	r30
 486:	ff 93       	push	r31
	(*Ptr_1)();
 488:	e0 91 6c 00 	lds	r30, 0x006C	; 0x80006c <Ptr_1>
 48c:	f0 91 6d 00 	lds	r31, 0x006D	; 0x80006d <Ptr_1+0x1>
 490:	09 95       	icall
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <PWM0_Init>:

void PWM0_Init(void)
{
	/* OC0_PIN_OUTPUT*/
	SET_BIT(DDRB,3);
 4b4:	87 b3       	in	r24, 0x17	; 23
 4b6:	88 60       	ori	r24, 0x08	; 8
 4b8:	87 bb       	out	0x17, r24	; 23
	/* FAST_PWM*/
	SET_BIT(TCCR0,3);
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	88 60       	ori	r24, 0x08	; 8
 4be:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,6);
 4c0:	83 b7       	in	r24, 0x33	; 51
 4c2:	80 64       	ori	r24, 0x40	; 64
 4c4:	83 bf       	out	0x33, r24	; 51
	/* NON INVERTED MODE*/
	 SET_BIT(TCCR0,5);
 4c6:	83 b7       	in	r24, 0x33	; 51
 4c8:	80 62       	ori	r24, 0x20	; 32
 4ca:	83 bf       	out	0x33, r24	; 51
 4cc:	08 95       	ret

000004ce <PWM0_Adjust>:
}

void PWM0_Adjust(uint16 Duty_Cycle)
{
	OCR0=((Duty_Cycle * 256)/100)-1;
 4ce:	20 e0       	ldi	r18, 0x00	; 0
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	38 2f       	mov	r19, r24
 4d4:	36 95       	lsr	r19
 4d6:	27 95       	ror	r18
 4d8:	36 95       	lsr	r19
 4da:	27 95       	ror	r18
 4dc:	ab e7       	ldi	r26, 0x7B	; 123
 4de:	b4 e1       	ldi	r27, 0x14	; 20
 4e0:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <__umulhisi3>
 4e4:	96 95       	lsr	r25
 4e6:	87 95       	ror	r24
 4e8:	81 50       	subi	r24, 0x01	; 1
 4ea:	8c bf       	out	0x3c, r24	; 60
 4ec:	08 95       	ret

000004ee <PWM0_Start>:
}

void PWM0_Start(void)
{
	/* no prescaler */
	SET_BIT(TCCR0,0);
 4ee:	83 b7       	in	r24, 0x33	; 51
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	83 bf       	out	0x33, r24	; 51
 4f4:	08 95       	ret

000004f6 <__umulhisi3>:
 4f6:	a2 9f       	mul	r26, r18
 4f8:	b0 01       	movw	r22, r0
 4fa:	b3 9f       	mul	r27, r19
 4fc:	c0 01       	movw	r24, r0
 4fe:	a3 9f       	mul	r26, r19
 500:	70 0d       	add	r23, r0
 502:	81 1d       	adc	r24, r1
 504:	11 24       	eor	r1, r1
 506:	91 1d       	adc	r25, r1
 508:	b2 9f       	mul	r27, r18
 50a:	70 0d       	add	r23, r0
 50c:	81 1d       	adc	r24, r1
 50e:	11 24       	eor	r1, r1
 510:	91 1d       	adc	r25, r1
 512:	08 95       	ret

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
